{"version":3,"sources":["webpack:///./src/trainings/training.js","webpack:///./src/trainings/NFB011.js","webpack:///./config/theme.json","webpack:///./src/components/hourglass.js","webpack:///./src/components/scorer.js","webpack:///./src/components/sounds/correctsound.js","webpack:///./src/components/sounds/wrongsound.js","webpack:///./src/components/timingscorer.js","webpack:///./src/components/circlecircle.js","webpack:///./src/components/pushable.js"],"names":[],"mappings":";;;;;AAAA;AAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,aAAa;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY;AACZ;AACA,CAAC;AAAA;AAAA;;;;;;;;;;ACtBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACoB;AACN;AACS;AACI;AACP;AACR;AACH;;AAElD,yBAAyB,IAAI,OAAO;AACpC,uBAAuB,IAAI,QAAQ;;AAEnC;AACA;AACA;AACA,cAAc,MAAM;AACpB,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB,cAAc,aAAa;AAC3B,cAAc,aAAa;AAC3B,cAAc,UAAU;AACxB,cAAc,aAAa;AAC3B,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;;AAEA;AACA,+BAA+B;AAC/B;AACA,qBAAqB,gDAAK;AAC1B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kDAAkD;AAClE,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,2EAAS,wBAAwB,wEAAwE;AAClI,4BAA4B,wFAAY;AACxC,0BAA0B,oFAAU;AACpC,kCAAkC,iFAAY;AAC9C,gCAAgC,iFAAY;;AAE5C;AACA;AACA;AACA;AACA,8BAA8B,iFAAY,kBAAkB,mDAAmD;AAC/G,wBAAwB,yEAAQ;AAChC;AACA,gCAAgC,iFAAY,kBAAkB,mDAAmD;AACjH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEO,qBAAqB,sDAAQ;;AAEpC,YAAY,iBAAiB;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,SAAS,wBAAwB;AACjC,mBAAmB;AACnB,uBAAuB;AACvB;AACA;AACA;AACA,CAAC;AAAA;AAAA;;;;;;;;;;;;AChWD,kBAAkB,SAAS,ofAAof,WAAW,iDAAiD,YAAY,qBAAqB,SAAS,kEAAkE,UAAU,+BAA+B,WAAW,YAAY,WAAW,mEAAmE,WAAW,sHAAsH,WAAW,yBAAyB,WAAW,YAAY,WAAW,YAAY,WAAW,YAAY,WAAW,mEAAmE,WAAW,YAAY,WAAW,8BAA8B,WAAW,4GAA4G,WAAW,yCAAyC,gFAAgF,WAAW,mFAAmF,WAAW,sFAAsF,WAAW,yFAAyF,WAAW,iFAAiF,WAAW,qFAAqF,WAAW,2DAA2D,gFAAgF,WAAW,oGAAoG,WAAW,4GAA4G,WAAW,YAAY,WAAW,YAAY,WAAW,YAAY,WAAW,6HAA6H,WAAW,YAAY,WAAW,YAAY,WAAW,YAAY,WAAW,YAAY,WAAW,4BAA4B,4CAA4C,EAAE,8CAA8C,EAAE,+CAA+C,EAAE,4CAA4C,EAAE,+CAA+C,EAAE,4CAA4C,EAAE,WAAW,YAAY,WAAW,YAAY,WAAW,YAAY,WAAW,YAAY,WAAW,YAAY,WAAW,YAAY,WAAW,4BAA4B,6CAA6C,EAAE,+CAA+C,EAAE,6CAA6C,G;;;;;;;ACA7rG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB;AACA;AACO;;AAEP;AACA;AACA,aAAa,GAAG;AAChB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA,sCAAsC,yCAAyC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,CAAC;AAAA;AAAA;;;;;;;;;;;;;;;;AC1ID;AACA;AACA,cAAc,MAAM;AACpB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,IAAI;AACjB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,IAAI;AACjB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,IAAI;AACjB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA,CAAC;AAAA;AAAA;;;;;;;;ACnHD;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,cAAc;AAC5B,cAAc,MAAM;AACpB,cAAc,UAAU;AACxB,cAAc,QAAQ;AACtB;AACO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,qBAAqB;AAC3E;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA;AAAA;;;;;;;;ACtDD;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,cAAc;AAC5B,cAAc,MAAM;AACpB,cAAc,UAAU;AACxB,cAAc,QAAQ;AACtB;AACO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,qBAAqB;AACxE;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA;AAAA;;;;;;;;;;;;;;;ACvDD;AAAqC;;AAErC;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACO,2BAA2B,0DAAM;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA,CAAC;AAAA;AAAA;;;;;;;;ACvED;AACA;AACA,cAAc,GAAG;AACjB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;;AAEO;;AAEP;AACA;AACA,aAAa,GAAG;AAChB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,CAAC;AAAA;AAAA;;;;;;;;ACzMD;AACA;AACA,cAAc,GAAG;AACjB,cAAc,QAAQ;AACtB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,IAAI;AAClB;;AAEO;;AAEP;AACA;AACA,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA,GAAG;AAAA;AAAA","file":"2.js","sourcesContent":["export class Training{\r\n\r\n  constructor(userPreference) {\r\n    /* ユーザ設定の全体 */\r\n    this.userPreference = userPreference || {};\r\n    this.result = {};\r\n    this.scoreLog = {};\r\n  }\r\n  get uid(){ return null; }\r\n\r\n  /** ユーザ設定から個別トレーニング設定を取得 */\r\n  get preference(){\r\n    return this.userPreference[this.uid] || null;\r\n  }\r\n  /** ユーザ設定に個別トレーニング設定を保存 */\r\n  set preference(preference){\r\n    this.userPreference[this.uid] = preference;\r\n  }\r\n\r\n  get response(){\r\n    return {trainingResult: this.result, userPreference: this.userPreference, scoreLog: this.scoreLog};\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/trainings/training.js\n// module id = 0\n// module chunks = 0 1 2 3","import { Training } from './training.js';\r\nimport { TimingScorer } from '../components/timingscorer.js';\r\nimport { HourGlass } from '../components/hourglass.js';\r\nimport { WrongSound } from '../components/sounds/wrongsound.js';\r\nimport { CorrectSound } from '../components/sounds/correctsound.js';\r\nimport { CircleCircle } from '../components/circlecircle.js';\r\nimport { Pushable } from '../components/pushable.js';\r\nimport *  as theme from '../../config/theme.json';\r\n\r\nconst time_limit = 60000; //{number} - トレーニングの制限時間\r\nconst is_debug = false; //{boolean} - デバッグモードで実行するかどうか\r\n\r\n/**\r\n * [トレーニングNFB011] タイミングあわせ２\r\n * Libries: p5, p5sound, p5play\r\n * @property {Array} circleArray - サークルのスプライトを格納した配列\r\n * @property {Pushable} pushable - 顔のスプライト\r\n * @property {p5.Image} image - 顔の画像\r\n * @property {TimingScorer} circleTimingScorer - 円用のタイミングスコアラー\r\n * @property {TimingScorer} faceTimingScorer - 顔用のタイミングスコアラー\r\n * @property {HourGlass} hourGlass - 砂時計\r\n * @property {CorrectSound} correctSound - 成功音\r\n * @property {WrongSound} wrongSound - 失敗音\r\n * @property {boolean} mousePress - マウスが押されているかどうか\r\n * @property {number} maxWidth - 描画対象とする横幅\r\n * @property {number} numCircle - 表示するサークルの数\r\n * @property {number} avefps - 平均実FPS\r\n * @property {number} overTimerArray - 赤円と青円が重なってから1秒後に呼ばれるsetTimeout処理のIDを管理する配列\r\n * @property {number} fpsMeasurer - 直近2秒間の平均FPSを計算するsetInterval処理のID\r\n * @property {number} textSize - 文字サイズ\r\n * @property {Object} centerY - 各サークルのy座標\r\n */\r\n\r\nclass AdjustTiming2 {\r\n  constructor(p5, preference={}) {\r\n    this.$p5 = p5;\r\n    this.$p5.theme = theme;\r\n    this.level = preference ? preference.level : parseInt(p5.theme.NFB011.level);\r\n    this.waitingForReady = new Promise((resolve, reject) => {\r\n      this.ready = resolve;\r\n    });\r\n    this.waitingForStopped = new Promise((resolve, reject) => {\r\n      this.stop = resolve;\r\n    });\r\n    this.circleArray = [];\r\n    this.mousePress = false;\r\n    this.maxWidth = (p5.windowWidth < p5.windowHeight)\r\n      ? p5.windowWidth\r\n      : p5.pow(p5.windowHeight, 2) / p5.windowWidth;\r\n    this.avefps = 20;\r\n    this.overTimerArray = [];\r\n    this.textSize = this.maxWidth / 15;\r\n    this.center = {\r\n      circle1: {x: p5.windowWidth *(1/3), y:p5.windowHeight * 2/3},\r\n      circle2: {x: p5.windowWidth * (2/3), y:p5.windowHeight * 2/3}\r\n    };\r\n  }\r\n  /* [p5] preload処理 */\r\n  preload() {\r\n    if (this.$p5.theme.font)\r\n      this.font = this.$p5.loadFont(this.$p5.theme.font.path);\r\n    this.pushImage = this.$p5.loadImage('./assets/image/blackCircle.svg');\r\n  }\r\n\r\n  /* [p5] setup処理 */\r\n  setup() {\r\n    if (this.$p5.theme.NFB011.isUseImage) {\r\n      this.image = this.$p5.loadImage(this.$p5.theme.NFB011.imagePath);\r\n    } else {\r\n      this.image = this.$p5.theme.NFB011.iconfont;\r\n    }\r\n    this.$p5.createCanvas(this.$p5.windowWidth, this.$p5.windowHeight);\r\n    this.$p5.background(255, 0);\r\n    this.$p5.frameRate(20);\r\n    this.$p5.noLoop();\r\n\r\n    this.hourGlass = new HourGlass(this.$p5, time_limit, {isReturnEnable:this.$p5.theme.option.isReturnEnable, isChangeColor:true});\r\n    this.correctSound = new CorrectSound(this.$p5);\r\n    this.wrongSound = new WrongSound(this.$p5);\r\n    this.circleTimingScorer = new TimingScorer();\r\n    this.faceTimingScorer = new TimingScorer();\r\n\r\n    /* サークルを生成 */\r\n    let size = (this.$p5.height / 4) > (this.maxWidth * (9 / 10))\r\n      ? maxWidth * (2 / 3)\r\n      : this.$p5.height / 2;\r\n    this.circleArray.push(new CircleCircle(this.$p5, size, {x: this.center.circle1.x, y: this.center.circle1.y}, this.level == 1));\r\n    this.pushable = new Pushable(this.$p5, this.image, size, true, this.pushImage);\r\n    if (this.level == 2) {\r\n      this.circleArray.push(new CircleCircle(this.$p5, size, {x: this.center.circle2.x, y: this.center.circle2.y}));\r\n    }\r\n\r\n    this.message = this.$p5.createDiv(\"\")\r\n      .style(\"position\", \"fixed\")\r\n      .style(\"font-size\", this.textSize + 'px')\r\n      .style('width', '100vw')\r\n      .style(\"color\", this.$p5.theme.color.primaryText)\r\n      .style('text-align', 'center')\r\n      .style('margin', 'auto')\r\n      .style('top', '7vh')\r\n      .html(\"赤と青が重なった瞬間にタッチします<br>顔が出たらタッチします\")\r\n    ;\r\n    window.App.state = 'ready';\r\n    this.ready();\r\n  }\r\n\r\n  mousePressed() {\r\n    return false;\r\n  }\r\n\r\n  /* [p5]スタートボタン押下 */\r\n  start() {\r\n    this.hourGlass.start();\r\n    /* 直近2秒間の平均実FPSを設定 */\r\n    let fpsArray = [];\r\n    this.fpsMeasurer = setInterval(() => {\r\n      fpsArray.push(this.$p5.frameRate());\r\n      if (fpsArray.length > 10) fpsArray.shift();\r\n      this.avefps = fpsArray.reduce((pre, curr, i) => {\r\n        return pre + curr;\r\n      }, 0) / fpsArray.length;\r\n    }, 200);\r\n\r\n    setTimeout(() => {\r\n      this.showPushable();\r\n    }, this.randomTime);\r\n  }\r\n\r\n  /**\r\n   * 次にpushableを表示させるタイミングを決めるための数値\r\n   * @returns 2000~5000のランダムな整数値\r\n   */\r\n  get randomTime() {\r\n    return this.$p5.random(2000, 5000);\r\n  }\r\n\r\n  /**\r\n   * 呼ばれてから1秒経つと消えるマークを表示\r\n   * 消えてから数秒後に自身を呼び出す\r\n   */\r\n  showPushable() {\r\n    if (this.circleArray.length == 2 && Math.random() > 0.5) { //どちらのサークルに表示させるか\r\n      this.pushable.show({\r\n        x: this.center.circle2.x,\r\n        y: this.center.circle2.y\r\n      });\r\n    } else {\r\n      this.pushable.show({\r\n        x: this.center.circle1.x,\r\n        y: this.center.circle1.y\r\n      });\r\n    }\r\n    this.overTimerArray.push(setTimeout(() => {\r\n      if (this.pushable.sprite.visible == true) {\r\n        this.faceTimingScorer.isCorrects.push(false);\r\n        this.faceTimingScorer.responseTimes.push(-1);\r\n        this.pushable.hidden();\r\n        this.wrongSound.playSound();\r\n        if (App.isAndroid && this.$p5.theme.option.vibe===\"on\") Android.vibeWrong();\r\n        this.faceTimingScorer.penalty();\r\n      }\r\n      this.overTimerArray.push(setTimeout(() => {\r\n        this.showPushable();\r\n      },this.randomTime));\r\n    }, 1000));\r\n  }\r\n\r\n  /* [p5,p5play] draw処理 */\r\n  draw() {\r\n    this.$p5.noCanvas();\r\n    this.$p5.createCanvas(this.$p5.windowWidth, this.$p5.windowHeight);\r\n\r\n    this.$p5.textAlign(this.$p5.CENTER);\r\n    this.$p5.textSize(this.textSize);\r\n    this.$p5.textStyle(this.$p5.BOLD);\r\n    if (this.$p5.theme.font)\r\n      this.$p5.textFont(this.font);\r\n\r\n\r\n    if (this.hourGlass) this.hourGlass.renderGlass();\r\n    /* 赤点を移動させる */\r\n    this.circleArray.forEach((v, i, a) => {\r\n      v.movePoint(this.avefps);\r\n      /* 角度が90度となった場合、次に青円と赤円が重なる時間を計算して保持させる */\r\n      if (v.difRadian < 1.5708 && v.difRadian > 0.785398 && v.overrapTime < this.$p5.millis()){\r\n        v.overrapTime = this.$p5.millis() + (v.difRadian / v.speed / this.avefps * 1000);\r\n        /* 重なってから1秒間押されなかった場合、反応時間に0.5秒のペナルティ */\r\n        this.overTimerArray.push(setTimeout(() => {\r\n          if (v.overrapTime != 0) {\r\n            this.wrongSound.playSound();\r\n            this.circleTimingScorer.isCorrects.push(false);\r\n            this.circleTimingScorer.responseTimes.push(-1);\r\n            this.circleTimingScorer.penalty();\r\n            if (App.isAndroid && this.$p5.theme.option.vibe===\"on\") Android.vibeWrong();\r\n            v.overrapTime = 0;\r\n          }\r\n        }, v.overrapTime - this.$p5.millis() + 1000));\r\n      }\r\n    });\r\n\r\n    /* 顔か青円が押されたとき */\r\n    if (this.$p5.mouseIsPressed && this.mousePress == false) {\r\n      this.mousePress = true;\r\n      if (this.pushable.sprite.visible && this.pushable.sprite.mouseIsPressed) {\r\n        this.pushFace(this.pushable);\r\n      } else if (this.circleArray[0].bluePoint.mouseIsPressed) {\r\n        this.pushBlue(this.circleArray[0]);\r\n      } else if (this.circleArray.length == 2 && this.circleArray[1].bluePoint.mouseIsPressed) {\r\n        this.pushBlue(this.circleArray[1]);\r\n      } else if (\r\n        this.circleArray[0].insideCircle.mouseIsPressed\r\n        || (this.circleArray.length == 2 && this.circleArray[1].insideCircle.mouseIsPressed)\r\n      ) {\r\n        this.faceTimingScorer.responseTimes.push(-1);\r\n        this.faceTimingScorer.isCorrects.push(false);\r\n        this.faceTimingScorer.penalty();\r\n        this.wrongSound.playSound();\r\n        if (App.isAndroid && this.$p5.theme.option.vibe===\"on\") Android.vibeWrong();\r\n      }\r\n    }\r\n\r\n    if (!this.$p5.mouseIsPressed) this.mousePress = false;\r\n\r\n    // this.$p5.drawSprites();\r\n    this.circleArray.forEach((v, i, a)=>{\r\n      v.drawCircle();\r\n    })\r\n\r\n    this.pushable.drawEffect();\r\n\r\n    if (this.$p5.theme.NFB011.isUseImage) {\r\n      this.pushable.drawImage();\r\n    } else {\r\n      this.pushable.drawIconfont();\r\n    }\r\n\r\n    if (!this.hourGlass.isOver) return;\r\n    /* 終了処理 */\r\n    this.correctSound.stopSound();\r\n    this.wrongSound.stopSound();\r\n    this.$p5.noLoop();\r\n    this.overTimerArray.forEach((v, i, a) => {\r\n      clearTimeout(v);\r\n    })\r\n    clearTimeout(this.fpsMeasurer);\r\n    if (this.circleTimingScorer.pushCount == 0) {\r\n      this.circleTimingScorer.addReactionTime(1000);\r\n    }\r\n    if (this.faceTimingScorer.pushCount == 0) {\r\n      this.faceTimingScorer.addReactionTime(1000);\r\n    }\r\n    this.circleTimingScorer.score = this.circleTimingScorer.result;\r\n    this.faceTimingScorer.score = this.faceTimingScorer.result2;\r\n\r\n    const score = Math.floor((this.circleTimingScorer.score + this.faceTimingScorer.score) / 2);\r\n\r\n    /* 難易度を設定 */\r\n    let l = this.level;\r\n    const aveReaction = (this.circleTimingScorer.aveReaction + this.faceTimingScorer.aveReaction) / 2\r\n    // if (\r\n    //   aveReaction <= JSON.parse(this.$p5.theme.NFB011.threshold)\r\n    //   && this.level < 2\r\n    // ) {\r\n    //   l += 1;\r\n    // }\r\n    // if (\r\n    //   aveReaction >= 1000\r\n    //   && this.level > 1\r\n    // ) {\r\n    //   l -= 1;\r\n    // }\r\n\r\n    const scoreLog = [{\r\n      isCorrects: this.faceTimingScorer.isCorrects,\r\n      responseTimes: this.faceTimingScorer.responseTimes\r\n    },{\r\n      isCorrects: this.circleTimingScorer.isCorrects,\r\n      responseTimes: this.circleTimingScorer.responseTimes\r\n    }];\r\n\r\n    this.$p5.remove();\r\n    this.stop({\r\n      // score: this.timingScorer.result,\r\n      rawScore: score,\r\n      level: l,\r\n      scoreLog: scoreLog\r\n    });\r\n  }\r\n\r\n  /* 青円をクリックした際の処理 */\r\n  pushBlue(circle) {\r\n    circle.alpha = 255;\r\n    circle.diff = circle.calcDiff();\r\n    const isCorrect = circle.diff < JSON.parse(this.$p5.theme.NFB011.threshold)\r\n    this.circleTimingScorer.isCorrects.push(isCorrect);\r\n    this.circleTimingScorer.responseTimes.push(isCorrect ?circle.diff :-1);\r\n    if (isCorrect) {\r\n      circle.lerp = 1.00;\r\n      this.correctSound.playSound();\r\n      circle.outsideColor = this.$p5.theme.color.accent;\r\n    } else {\r\n      this.wrongSound.playSound();\r\n      if (App.isAndroid && this.$p5.theme.option.vibe===\"on\") Android.vibeWrong();\r\n    }\r\n    if (circle.diff > 500) {\r\n      this.circleTimingScorer.addReactionTime(500);\r\n    } else {\r\n      this.circleTimingScorer.addReactionTime(circle.diff);\r\n    }\r\n    circle.overrapTime = 0;\r\n  }\r\n\r\n  /* 顔をクリックした際の処理 */\r\n  pushFace(pushable) {\r\n    let index = pushable.sprite.position.x === this.center.circle1.x\r\n      ? 0\r\n      : 1\r\n    this.circleArray[index].lerp = 1.00;\r\n    this.circleArray[index].outsideColor = this.$p5.theme.color.pushableFlash;\r\n\r\n    this.correctSound.playSound();\r\n    const diff = pushable.calcDiff();\r\n    this.faceTimingScorer.addReactionTime(diff);\r\n    this.faceTimingScorer.responseTimes.push(diff);\r\n    this.faceTimingScorer.isCorrects.push(true);\r\n    // pushable.alpha = 255;\r\n    pushable.hidden();\r\n  }\r\n\r\n}\r\n\r\nexport class NFB011 extends Training{\r\n\r\n  get uid(){ return 'NFB011'; }\r\n\r\n  async start() {\r\n    new p5(($p5) => {\r\n      this.training = new AdjustTiming2($p5, this.preference);\r\n      $p5.preload = this.training.preload.bind(this.training);\r\n      $p5.setup = this.training.setup.bind(this.training);\r\n      $p5.draw = this.training.draw.bind(this.training);\r\n      $p5.mousePressed = this.training.mousePressed.bind(this.training);\r\n    }, \"main\");\r\n    await this.training.waitingForReady;\r\n\r\n    this.training.start();\r\n    let {rawScore,level,scoreLog} = await this.training.waitingForStopped;\r\n    this.result = {rawScore};\r\n    this.preference = {level};\r\n    this.scoreLog = scoreLog;\r\n    return this.response;\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/trainings/NFB011.js\n// module id = 3\n// module chunks = 2","module.exports = {\"color\":{\"primary\":\"#ffe600\",\"secondary\":\"#ed7229\",\"positioner\":\"#ffffff\",\"positionerLight\":\"#ffffff\",\"positionerText\":\"#505050\",\"positionerPushedText\":\"#dfdfdf\",\"domKeyOutline\":\"#505050\",\"domKeyText\":\"#505050\",\"domKeyBackground\":\"#ffffff\",\"pushableFlash\":\"#ff0000\",\"insideCircle\":\"#e6e6e6\",\"outsideCircle\":\"#c8c8c8\",\"accent\":\"#37b595\",\"primaryText\":\"#606060\",\"secondaryText\":\"#424242\",\"accentText\":\"#000000\",\"background\":\"#ffffff\",\"empty\":\"#dfdfdf\",\"shadow\":\"#c5c5c6\",\"circles\":\"#ed7769\",\"crosses\":\"#22587a\"},\"option\":{\"vibe\":\"off\",\"sound\":\"on\",\"isReturnEnable\":false},\"tengrid\":{\"borderRadius\":\"0px\"},\"font\":{\"family\":\"LocalFont\",\"path\":\"./assets/font/mplus-1p-regular.woff\"},\"pulse\":{\"images\":null,\"ballImage\":null},\"NFB001\":{\"level\":\"2\"},\"NFB002\":{\"level\":\"2\",\"symbolList\":[\"〇\",\"☆\",\"▽\",\"■\",\"◇\",\"×\",\"△\",\"※\",\"◎\",\"□\"]},\"NFB003\":{\"level\":\"2\",\"pushList\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\"]]},\"NFB004\":{\"level\":\"3\",\"marker\":\"●\"},\"NFB005\":{\"level\":\"4\"},\"NFB006\":{\"level\":\"4\"},\"NFB007\":{\"level\":\"1\"},\"NFB008\":{\"level\":\"1\",\"symbolList\":[\"〇\",\"☆\",\"▽\",\"■\",\"◇\",\"×\",\"△\",\"※\",\"◎\",\"□\"]},\"NFB009\":{\"level\":\"1\"},\"NFB010\":{\"level\":\"3\",\"threshold\":\"500\"},\"NFB011\":{\"level\":\"2\",\"threshold\":\"500\",\"isUseImage\":true,\"iconfont\":\"tag_faces\",\"imagePath\":\"assets/image/face1.png\"},\"NFB012\":{\"level\":\"1\",\"isUseImage\":false,\"image1\":{\"iconfont\":\"tag_faces\",\"imagePath\":\"./assets/image/push1.png\",\"isPositive\":true},\"image2\":{\"iconfont\":\"tag_faces\",\"imagePath\":\"./assets/image/unpush1.png\",\"isPositive\":false},\"image3\":{\"iconfont\":\"brightness_high\",\"imagePath\":\"./assets/image/push2.png\",\"isPositive\":true},\"image4\":{\"iconfont\":\"brightness_high\",\"imagePath\":\"./assets/image/unpush2.png\",\"isPositive\":false},\"image5\":{\"iconfont\":\"bug_report\",\"imagePath\":\"./assets/image/push3.png\",\"isPositive\":true},\"image6\":{\"iconfont\":\"bug_report\",\"imagePath\":\"./assets/image/unpush3.png\",\"isPositive\":false}},\"NFB013\":{\"level\":\"1\",\"threshold\":\"1000\",\"isUseImage\":true,\"image1\":{\"iconfont\":\"tag_faces\",\"imagePath\":\"./assets/image/face1.png\",\"isPositive\":true},\"image2\":{\"iconfont\":\"sentiment_very_dissatisfied\",\"imagePath\":\"./assets/image/face2.png\",\"isPositive\":false}},\"NFB014\":{\"level\":\"1\",\"pushList\":[[\"1\",\"あ\",\"2\",\"い\",\"3\",\"う\",\"4\",\"え\",\"5\",\"お\",\"6\",\"か\",\"7\",\"き\",\"8\",\"く\",\"9\",\"け\",\"10\",\"こ\"]]},\"NFB015\":{\"level\":\"1\"},\"NFB016\":{\"level\":\"1\"},\"NFB017\":{\"level\":\"1\"},\"NFB018\":{\"level\":\"1\",\"threshold\":\"1000\",\"isUseImage\":false,\"iconfont\":\"star\",\"imagePath\":\"./assets/image/face1.png\",\"isPositive\":true},\"NFB019\":{\"level\":\"1\"},\"NFB020\":{\"level\":\"1\"},\"NFB021\":{\"level\":\"1\"},\"NFB022\":{\"level\":\"1\"},\"NFB023\":{\"level\":\"1\",\"flowingList\":[{\"name\":\"犬\",\"image\":\"./assets/image/dog.png\"},{\"name\":\"馬\",\"image\":\"./assets/image/horse.png\"},{\"name\":\"猿\",\"image\":\"./assets/image/monkey.png\"},{\"name\":\"猫\",\"image\":\"./assets/image/cat.png\"},{\"name\":\"兎\",\"image\":\"./assets/image/rabbit.png\"},{\"name\":\"鼠\",\"image\":\"./assets/image/rat.png\"}]},\"NFB024\":{\"level\":\"1\"},\"NFB025\":{\"level\":\"1\"},\"NFB026\":{\"level\":\"1\"},\"NFB027\":{\"level\":\"1\"},\"NFB028\":{\"level\":\"1\"},\"NFB029\":{\"level\":\"1\"},\"NFB030\":{\"level\":\"1\",\"flowingList\":[{\"name\":\"いぬ\",\"image\":\"./assets/image/dog.png\"},{\"name\":\"うま\",\"image\":\"./assets/image/horse.png\"},{\"name\":\"ねこ\",\"image\":\"./assets/image/cat.png\"}]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./config/theme.json\n// module id = 9\n// module chunks = 0 1 2 4 5 6","const fully = '#66CC33';\r\nconst half = '#FFD400';\r\nconst scanty = '#FF3300';\r\nconst elapsed = '#848484';\r\n\r\n/**\r\n * 砂時計\r\n * Libries: p5\r\n * @property {number} startMillis - 開始タイミング\r\n * @property {number} timeLimit - 制限時間\r\n * @property {number} vh - ディスプレイの高さの1/100\r\n * @property {number} vw - ディスプレイの幅の1/100\r\n * @property {number} short - vhとvwの短い方\r\n * @property {boolean} isStart - スタートボタンが押されたかどうか\r\n *\r\n */\r\nexport class HourGlass {\r\n\r\n  /**\r\n   * 初期表示\r\n   * @param {p5} p\r\n   * @param {number} timeLimit - 制限時間\r\n   * @param {boolean} [isReturnEnable] - 戻るボタンの表示の有無\r\n   */\r\n  constructor(p, timeLimit, option = {isReturnEnable:false, isChangeColor:true}) {\r\n    this.p5 = p;\r\n    this.timeLimit = timeLimit;\r\n    this.option = option;\r\n    let shortView = p.windowHeight > p.windowWidth\r\n      ? 'vw'\r\n      : 'vh';\r\n    this.secGlass = new Date(this.timeLimit + this.startMillis - this.p5.millis());\r\n\r\n    // let div = p.createDiv('');\r\n    // div.id(\"hourglass\")\r\n    //   .style('position', 'fixed')\r\n    //   .style('top','10vw')\r\n    //   // .style('top', '7vw')\r\n    //   .style('left', '7vw')\r\n    //   .style('font-size', '3.5vw')\r\n    //   // .style('background-color', '#fff')\r\n    //   // .style('color', '#616161')\r\n    //   .style('width', '11vw')\r\n    //   .style('height', '11vw')\r\n    //   .style('border-radius', '50%')\r\n    //   .style('display', 'flex')\r\n    //   .style('align-items', 'center')\r\n    //   .style('justify-content', 'center')\r\n    //   .html(\"戻る\")\r\n    // ;\r\n    if (option.isReturnEnable) {\r\n      this.div = p.createButton('戻る')\r\n        .id(\"hourglass\")\r\n        .style('position', 'fixed')\r\n        // .style('top', '10vw')\r\n        .style('top', '4' + shortView)\r\n        .style('left', '4' + shortView)\r\n        .style('font-size', '3.5' + shortView)\r\n        .style('background-color', 'transparent')\r\n        // .style('color', '#616161')\r\n        .style('width', '17' + shortView)\r\n        .style('height', '17' + shortView)\r\n        // .style('border-radius', '50%')\r\n        .style('display', 'flex')\r\n        .style('align-items', 'center')\r\n        .style('justify-content', 'center')\r\n        .style('padding-top', '7' + shortView)\r\n        .style('border-style', 'none')\r\n        .mousePressed(() => {\r\n          if (App.isAndroid) Android.redo();\r\n        })\r\n      ;\r\n    }\r\n    this.isStart = false;\r\n  }\r\n\r\n  /**\r\n   * [p5] トレーニング開始時処理\r\n   */\r\n  start() {\r\n    this.startMillis = this.p5.millis();\r\n    this.p5.loop();\r\n    this.isStart = true;\r\n  }\r\n\r\n  /**\r\n   * [p5] 砂時計を描画\r\n   */\r\n  renderGlass(isVisible = true) {\r\n    this.vh = this.p5.windowHeight / 100;\r\n    this.vw = this.p5.windowWidth / 100;\r\n    this.short = this.p5.min(this.vh, this.vw);\r\n\r\n    // const hourglass = this.p5.select(\"#hourglass\");\r\n    this.secGlass = new Date(this.timeLimit + this.startMillis - this.p5.millis());\r\n    // let nowSec = (\"0\" + this.secGlass.getSeconds()).slice(-2);\r\n    // hourglass.html(\"戻る\");\r\n    /** 外枠部分 */\r\n    this.limitSec = this.timeLimit / 1000 - this.secGlass.getSeconds() - (this.secGlass.getMilliseconds() / 1000);\r\n    if (!isVisible)\r\n      return;\r\n    this.p5.noStroke();\r\n    this.p5.fill(fully);\r\n    if (this.option.isChangeColor && (this.timeLimit / 1000) / 2 > this.secGlass.getSeconds()){\r\n      this.p5.fill(half);\r\n    }\r\n    if (this.option.isChangeColor && (this.timeLimit / 1000) / 4 > this.secGlass.getSeconds()){\r\n      this.p5.fill(scanty);\r\n    }\r\n    this.p5.ellipseMode(this.p5.CORNER);\r\n    this.p5.ellipse(4 * this.short, 4 * this.short, 17 * this.short, 17 * this.short);\r\n    // this.p5.fill('#212121');\r\n    this.p5.fill(elapsed);\r\n    let rad = (360 / (this.timeLimit / 1000)) * this.limitSec * Math.PI / 180;\r\n    let s = -90 * Math.PI / 180;\r\n    if (this.isOver) {\r\n      this.p5.arc(4 * this.short, 4 * this.short, 17 * this.short, 17 * this.short, s, s - 0.001 )\r\n    } else {\r\n      this.p5.arc(4 * this.short, 4 * this.short, 17 * this.short, 17 * this.short, s, s + rad + 0.001);\r\n    }\r\n    // if (!this.isStart){\r\n    //   this.p5.select(\"#hourglass\").html(this.timeLimit / 1000);\r\n    // }\r\n    this.p5.ellipseMode(this.p5.CENTER);\r\n  }\r\n\r\n  /**\r\n   * [p5] タイムオーバー判定\r\n   * @returns {boolean} 経過した：true 経過していない:false\r\n   */\r\n  get isOver() {\r\n    this.endTime = this.p5.millis();\r\n    return (this.p5.millis() > (this.timeLimit + this.startMillis));\r\n  }\r\n\r\n  get limit() {\r\n    return this.secGlass.getSeconds() + (this.secGlass.getMilliseconds() / 1000)\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/hourglass.js\n// module id = 10\n// module chunks = 0 1 2 4 5 6","\r\n/**\r\n * [Component] スコアラー\r\n * @property {Array} corrects - 正解の配列\r\n * @property {number} score - スコア（間違うとペナルティをうけます）\r\n * @property {number} correctCount - 正答数\r\n *\r\n */\r\nexport class Scorer {\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  constructor() {\r\n    this.corrects = [];\r\n    this.score = 0;\r\n    this.correctCount = 0;\r\n    this.rapTime = 0;\r\n    this.responseTimes = [];\r\n    this.isCorrects = [];\r\n  }\r\n\r\n  /**\r\n   * 問題の正解をcorrectsに追加します\r\n   * void\r\n   * @private\r\n   * @param {any} correct - 問題の正解\r\n   */\r\n  addCorrect(correct) {\r\n    this.corrects.push(correct);\r\n  }\r\n\r\n  /**\r\n   * correctsを初期化します\r\n   * void\r\n   */\r\n  formatCorrect() {\r\n    this.corrects = [];\r\n  }\r\n\r\n  /**\r\n   * N番目が正解かどうか\r\n   * @param {number} index - Nに相当する値\r\n   * @param {any} answer - 回答\r\n   * @returns {boolean} true: 正解である、false: 間違えてる\r\n   */\r\n  isCorrect(index, answer) {\r\n    return this.corrects[this.corrects.length - (1 + index)] === answer;\r\n  }\r\n\r\n  /**\r\n   * 最新が正解かどうか\r\n   * @param {any} answer - 回答\r\n   * @returns {boolean} true: 正解である、false: 間違えてる\r\n   */\r\n  isCorrectLastest(answer) {\r\n    return this.isCorrect(0, answer);\r\n  }\r\n\r\n  /**\r\n   * 回答が正解一覧に含まれているかどうか\r\n   * @param {any} answer - 回答\r\n   * @returns {boolean} true: 含まれている、false: 含まれていない\r\n   */\r\n  isIncludeCorrect(answer) {\r\n    return this.corrects.includes(answer);\r\n  }\r\n\r\n  /**\r\n   * 総合脳活性度を算出します\r\n   * @returns {number} 総合脳活性度\r\n   */\r\n  calcActiveness() {\r\n    return this.score * 1;\r\n  }\r\n\r\n  /**\r\n   * 正答率を算出します\r\n   * @returns {number} 正答率\r\n   */\r\n  calcPerCorrect() {\r\n    if (this.corrects.length === 0) {\r\n      return 0;\r\n    }\r\n    if (this.correctCount != 0) {\r\n      return this.correctCount / this.corrects.length;\r\n    }\r\n    return this.score / this.corrects.length;\r\n  }\r\n\r\n  /**\r\n   * NBackトレーニングにおける正答率を算出します\r\n   * @param {number} timeLimit - 制限時間\r\n   * @param {number} interval - 出題間隔\r\n   * @returns {number} 正答率\r\n   */\r\n  calcNbackPerCorrect(timeLimit, interval) {\r\n    var questionCount = timeLimit / interval;\r\n    return this.correctCount / questionCount;\r\n  }\r\n\r\n  get numOfCorrect() {\r\n    let count = 0;\r\n    this.isCorrects.forEach((v, i)=>{\r\n      if(v === true){\r\n        count += 1;\r\n      }\r\n    })\r\n    return count;\r\n  }\r\n\r\n  addResponseTime() {\r\n    this.responseTimes.push(Date.now() - this.rapTime)\r\n  }\r\n\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/scorer.js\n// module id = 11\n// module chunks = 0 1 2","/**\r\n * [Component] 正解\r\n * Libries:p5sound\r\n * @property {p5.Env} env エンベロープ\r\n * @property {p5.Oscillator} osc オシレータ\r\n * @property {Array} pattern フレーズに登録する楽譜\r\n * @property {p5.Phrase} phrase patternに基づいた再生フレーズ\r\n * @property {p5.Part} part パート（再生フレーズ,BPM）\r\n */\r\nexport class CorrectSound {\r\n\r\n  /**\r\n   * [p5sound] 再生音定義\r\n   */\r\n  constructor(p) {\r\n    this.p5 = p;\r\n    this.env = new p5.Envelope(0.000001, 0.1, 0.08, 0.1, 0.4, 0);\r\n    this.osc = new p5.Oscillator();\r\n    this.osc.setType('square');\r\n    this.osc.amp(0);\r\n    this.pattern = [2100, 0, 1660];\r\n    this.phrase = new p5.Phrase('correct', (t, p) => {this.makeSound(t, p)}, this.pattern);\r\n    this.part = new p5.Part();\r\n    this.part.addPhrase(this.phrase);\r\n    this.part.setBPM(95);\r\n  }\r\n\r\n  /**\r\n   * [p5sound] 音声生成\r\n   * @param {Number} time\r\n   * @param {Array} playbackRate 音高\r\n   */\r\n  makeSound(time, playbackRate) {\r\n    this.osc.freq(playbackRate);\r\n    this.osc.start();\r\n    this.env.play(this.osc);\r\n  }\r\n\r\n  /**\r\n   * [p5sound] 音声再生\r\n   * トレーニングからはこれを呼び出す\r\n   */\r\n  playSound(option = null) {\r\n    if (this.p5.theme.option.sound === \"off\" && option === null) return;\r\n    this.part.start();\r\n  }\r\n\r\n  /**\r\n   * [p5sound] 音声停止\r\n   * トレーニングからはこれを呼び出す\r\n   */\r\n  stopSound() {\r\n    this.part.stop();\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/sounds/correctsound.js\n// module id = 12\n// module chunks = 0 1 2","/**\r\n * [Component] 不正解\r\n * Libries:p5sound\r\n * @property {p5.Env} env エンベロープ\r\n * @property {p5.Oscillator} osc オシレータ\r\n * @property {array} pattern フレーズに登録する楽譜\r\n * @property {p5.Phrase} phrase patternに基づいた再生フレーズ\r\n * @property {p5.Part} part パート（再生フレーズ,BPM）\r\n */\r\nexport class WrongSound {\r\n\r\n  /**\r\n   * [p5sound] 再生音定義\r\n   *\r\n   */\r\n  constructor(p) {\r\n    this.p5 = p;\r\n    this.env = new p5.Envelope(0.00001, 0.1, 0.08, 0.1, 0.00001, 0.000001);\r\n    this.osc = new p5.Oscillator();\r\n    this.osc.setType('square');\r\n    this.osc.amp(0);\r\n    this.pattern = [250, 0, 250, 250, 250, 250];\r\n    this.phrase = new p5.Phrase('wrong',(t, p) => {this.makeSound(t, p)}, this.pattern);\r\n    this.part = new p5.Part();\r\n    this.part.addPhrase(this.phrase);\r\n    this.part.setBPM(180);\r\n  }\r\n\r\n  /**\r\n   * [p5sound] 音声生成\r\n   * @param {Number} time\r\n   * @param {Array} playbackRate 音高\r\n   */\r\n  makeSound(time, playbackRate) {\r\n    this.osc.freq(playbackRate);\r\n    this.osc.start();\r\n    this.env.play(this.osc);\r\n  }\r\n\r\n  /**\r\n   * [p5sound] 音声再生\r\n   * トレーニングからはこれを呼び出す\r\n   */\r\n  playSound(option = null) {\r\n    if (this.p5.theme.option.sound === \"off\" && option === null) return;\r\n    this.part.start();\r\n  }\r\n\r\n  /**\r\n   * [p5sound] 音声停止\r\n   * トレーニングからはこれを呼び出す\r\n   */\r\n  stopSound() {\r\n    this.part.stop();\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/sounds/wrongsound.js\n// module id = 13\n// module chunks = 0 1 2","import { Scorer } from './scorer.js';\r\n\r\n/**\r\n * タイミングスコアラー\r\n * @property {number} pushCount - クリックされた回数\r\n * @property {number} totalTime - 反応時間の総計\r\n */\r\nexport class TimingScorer extends Scorer {\r\n\r\n  constructor() {\r\n    super();\r\n    this.totalTime = 0;\r\n    this.pushCount = 0;\r\n  }\r\n  /**\r\n   * スコア判定メソッド\r\n   * @param {number} diff - 予測のズレ時間\r\n   */\r\n  addReactionTime(diff) {\r\n    this.pushCount += 1;\r\n    this.totalTime += diff;\r\n  }\r\n\r\n  /* 失敗時ペナルティ */\r\n  penalty() {\r\n    this.totalTime += 500;\r\n  }\r\n\r\n  /**\r\n   * 平均反応時間を取得\r\n   * @returns {number} 平均反応時間\r\n   */\r\n  get aveReaction() {\r\n    if (this.pushCount === 0){\r\n      this.pushCount = 1;\r\n    }\r\n    return this.totalTime / this.pushCount;\r\n  }\r\n\r\n  /**\r\n   * 平均反応時間から求められた結果を取得\r\n   * @return {number} 最大10、最小1の整数値\r\n   */\r\n  get result() {\r\n    let result = 1 / (this.aveReaction / 1000);\r\n    return Math.round(Math.min(Math.max(result, 1), 10));\r\n  }\r\n\r\n  /**\r\n   * 2秒から平均反応時間を引いた数値を10段階のスコアにして返します\r\n   * 反射神経系に使えるかもしれません\r\n   * @returns {number} スコア(1~10)\r\n   */\r\n  get result2() {\r\n    return Math.min(\r\n      Math.max(\r\n        20 - Math.floor(this.aveReaction / 100),\r\n        1\r\n      ),\r\n      10\r\n    );\r\n  }\r\n\r\n  /* プロパティを初期値に戻します */\r\n  reset() {\r\n    this.pushCount = 0;\r\n    this.totalTime = 0;\r\n  }\r\n\r\n\r\n\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/timingscorer.js\n// module id = 21\n// module chunks = 2","/**\r\n * [Component] サークル\r\n * @property {p5} p5\r\n * @property {number} distance - 青円赤円を描画する、中心からの距離\r\n * @property {Object} center - サークルの中心\r\n * @property {number} overrapTime - 青円と赤円が重なる時間\r\n * @property {Object} outsideCircle - 外側の円のスプライト\r\n * @property {Object} insideCircle - 内側の円のスプライト\r\n * @property {number} blueRadian - 青円の角度\r\n * @property {Object} bluePoint - 青円のスプライト\r\n * @property {number} redRadian - 赤円の角度\r\n * @property {Object} redPoint - 赤円のスプライト\r\n * @property {boolean} isClockwise - 赤円が時計回りかどうか\r\n * @property {number} difRadian - 赤円と青円のなす角\r\n * @property {number} speed - 1フレームに赤円が進む角度\r\n * @property {number} diff - 反応速度\r\n */\r\n\r\nexport class CircleCircle {\r\n\r\n  /**\r\n   * サークルを作成\r\n   * @param {p5} p\r\n   * @param {number} size - サイズ\r\n   * @param {Object} position - 中心点\r\n   * @param {boolean} [isEasyMode] - 赤円と青円の難易度を下げるかどうか\r\n   */\r\n  constructor(p, size, position, isEasyMode = false) {\r\n    this.p5 = p;\r\n    this.distance = size * (5 / 12);\r\n    this.center = {x:position.x, y:position.y}\r\n    this.overrapTime = 0;\r\n    this.alpha = 0;\r\n    this.size = size;\r\n    this.outsideColor = 200;\r\n    this.image = p.loadImage(\"./assets/image/blueCircle.svg\");\r\n    this.lerp = 0.00;\r\n  \r\n    this.outsideCircle = p.createSprite(this.center.x, this.center.y, size, size);\r\n    this.outsideCircle.draw = function() {\r\n      p.fill(200);\r\n      p.stroke(230);\r\n      p.ellipse(0, 0, size);\r\n    }\r\n    // this.outsideCircle.mouseActive = true;\r\n\r\n    this.insideCircle = p.createSprite(this.center.x, this.center.y, size * (2 / 3), size * (2 / 3));\r\n    this.insideCircle.draw = function() {\r\n      p.fill(230);\r\n      p.noStroke();\r\n      p.ellipse(0, 0, size * (2 / 3));\r\n    }\r\n    this.insideCircle.mouseActive = true;\r\n\r\n    this.blueRadian = p.radians(isEasyMode ? 270 : p.random(0, 360));\r\n    this.bluePoint = p.createSprite(\r\n      this.center.x + p.cos(this.blueRadian) * this.distance,\r\n      this.center.y + p.sin(this.blueRadian) * this.distance,\r\n      size / 4,\r\n      size / 4\r\n    );\r\n    this.bluePoint.draw = function() {\r\n      p.fill(0, 0, 255);\r\n      p.noStroke();\r\n      p.ellipse(0, 0, size / 4.5);\r\n    }\r\n    this.bluePoint.setCollider(\"circle\", 0, 0, size / 6);\r\n    this.bluePoint.mouseActive = true;\r\n    // this.bluePoint.debug=true;\r\n\r\n    // this.redRadian =p.radians(p.random(0,360));\r\n    this.redRadian = this.blueRadian;\r\n    this.redPoint = p.createSprite(\r\n      this.center.x + p.cos(this.redRadian) * this.distance,\r\n      this.center.y + p.sin(this.redRadian) * this.distance,\r\n      size / 4,\r\n      size / 4\r\n    );\r\n    this.redPoint.draw = function() {\r\n      p.fill(255, 0, 0);\r\n      p.noStroke();\r\n      p.ellipse(0, 0, size / 4.5);\r\n    }\r\n\r\n    this.isClockwise = isEasyMode\r\n      ? true\r\n      : Math.random() >= 0.5;\r\n    this.difRadian = this.getDifRadian();\r\n    this.speed = this.p5.radians(isEasyMode ? 3 : p.random(1, 4));\r\n    this.diff;\r\n  }\r\n\r\n  // start(){\r\n  //   this.overrapTime = this.p5.millis() + (this.difRadian/this.speed/20*1000);\r\n  // }\r\n\r\n  /**\r\n   * 二つの円が重なる時間と今の時間との差を取得\r\n   * @returns {number} 二つの円が重なる時間と今の時間との差\r\n   */\r\n  calcDiff() {\r\n    return Math.abs(this.p5.millis() - this.overrapTime);\r\n  }\r\n\r\n  /**\r\n   * 赤円と青円が成す角度を取得\r\n   * 向きは赤円の進行方向\r\n   * @returns {number} 赤円と青円が成す角度\r\n   */\r\n  getDifRadian() {\r\n    let difRadian = Math.abs(this.redRadian - this.blueRadian);\r\n    if (\r\n      (this.redRadian > this.blueRadian && this.isClockwise)\r\n      || (this.blueRadian > this.redRadian && !this.isClockwise)\r\n    ){\r\n      difRadian = this.p5.TWO_PI - difRadian;\r\n    }\r\n    return difRadian;\r\n  }\r\n\r\n  /**\r\n   * 赤円を移動させる\r\n   */\r\n  movePoint(avefps) {\r\n    if (this.isClockwise) {\r\n      this.redRadian += this.speed;\r\n      if (this.redRadian > this.p5.TWO_PI)\r\n        this.redRadian -= this.p5.TWO_PI;\r\n    } else {\r\n      this.redRadian -= this.speed;\r\n      if (this.redRadian < 0)\r\n        this.redRadian += this.p5.TWO_PI;\r\n    }\r\n    this.redPoint.position = {\r\n      x: this.center.x + Math.cos(this.redRadian) * this.distance,\r\n      y: this.center.y + Math.sin(this.redRadian) * this.distance\r\n    };\r\n    this.difRadian = this.getDifRadian();\r\n  }\r\n\r\n  /**\r\n   * 赤円の位置に画像を描画する\r\n   * @param {p5.Image} pic - 表示するp5Imageオブジェクト\r\n   */\r\n  drawRedPointImage(pic) {\r\n    pic.mask(pic);\r\n    this.p5.tint(255, 255);\r\n    this.p5.image(\r\n      pic,\r\n      this.redPoint.position.x - this.redPoint.width / 2,\r\n      this.redPoint.position.y - this.redPoint.height / 2,\r\n      this.redPoint.width,\r\n      this.redPoint.height\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 青円の位置に画像を描画する\r\n   * @param {p5.Image} pic - 表示するp5Imageオブジェクト\r\n   */\r\n  drawBluePointImage(pic) {\r\n    pic.mask(pic)\r\n    this.p5.tint(255, 255);\r\n    this.p5.image(\r\n      pic,\r\n      this.bluePoint.position.x - this.bluePoint.width / 2,\r\n      this.bluePoint.position.y - this.bluePoint.height / 2,\r\n      this.bluePoint.width,\r\n      this.bluePoint.height\r\n    );\r\n  }\r\n\r\n  /**\r\n   * タッチフィードバック表示\r\n   */\r\n  drawCircle(){\r\n    if (this.alpha > 0)\r\n      this.alpha -= 20;\r\n    if(this.lerp > 0)\r\n      this.lerp -= 0.1;\r\n    this.outsideCircle.draw = ()=>{\r\n      this.p5.fill(this.p5.lerpColor(this.p5.color(200), this.p5.color(this.outsideColor), this.lerp));\r\n      this.p5.stroke(230);\r\n      this.p5.ellipse(0, 0, this.size);\r\n    }\r\n    this.p5.drawSprite(this.outsideCircle);\r\n    this.p5.drawSprite(this.insideCircle);\r\n  \r\n    this.p5.tint(255, this.alpha);\r\n    this.p5.image(\r\n      this.image,\r\n      this.bluePoint.position.x - this.bluePoint.width,\r\n      this.bluePoint.position.y - this.bluePoint.height,\r\n      this.bluePoint.width * 2,\r\n      this.bluePoint.height * 2\r\n    );\r\n\r\n    this.p5.drawSprite(this.bluePoint);\r\n    this.p5.drawSprite(this.redPoint);\r\n  }\r\n\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/circlecircle.js\n// module id = 22\n// module chunks = 2","/**\r\n * [Component] 押せるマーク\r\n * @property {p5} p5\r\n * @property {boolean} isPositive - 押すべきマークかどうか\r\n * @property {number} diff - 押された時間と表示された時間の差\r\n * @property {number} showTime - 表示された時間\r\n * @property {Object} sprite - マークのスプライト\r\n * @property {Any} image - 表示する画像もしくはiconfontの名前\r\n */\r\n\r\nexport class Pushable {\r\n\r\n    /**\r\n     * [p5,p5play]押せるマークを作成\r\n     * @param {p5} p\r\n     * @param {Any} image - 表示する画像もしくはiconfontの名前\r\n     * @param {number} size - 画像のサイズ\r\n     * @param {boolean} isPositive - 押すべき画像かどうか\r\n     */\r\n    constructor(p, image, size, isPositive, pushImage) {\r\n      this.p5 = p;\r\n      this.isPositive = isPositive;\r\n      this.diff;\r\n      this.showTime;\r\n      this.sprite = p.createSprite(0, 0, size * (2 / 3), size * (2 / 3));\r\n      this.sprite.shapeColor = p.color(200, 0);\r\n      this.sprite.setCollider('circle', 0, 0, size * (2 / 6));\r\n      this.sprite.visible = false;\r\n      this.sprite.mouseActive = true;\r\n      this.image = image;\r\n      this.pushCircle = pushImage;\r\n      this.alpha = 0;\r\n      // this.sprite.debug = true;\r\n    }\r\n\r\n    /* スプライトを表示する */\r\n    show(position) {\r\n      this.sprite.position.x = position.x\r\n      this.sprite.position.y = position.y;\r\n      this.sprite.visible = true;\r\n      this.showTime = this.p5.millis();\r\n    }\r\n\r\n    /* スプライトを隠す */\r\n    hidden() {\r\n      this.sprite.visible = false;\r\n    }\r\n\r\n    /* 画像を描画 */\r\n    drawImage() {\r\n      this.image.mask(this.image);\r\n      if (!this.sprite.visible) return;\r\n      this.p5.tint(255, 255);\r\n      this.p5.image(\r\n        this.image,\r\n        this.sprite.position.x - this.sprite.width / 2,\r\n        this.sprite.position.y - this.sprite.height / 2,\r\n        this.sprite.width,\r\n        this.sprite.height\r\n      );\r\n    }\r\n\r\n    drawEffect() {\r\n      if(this.alpha > 0)\r\n        this.alpha -= 30;\r\n      this.p5.tint(255, this.alpha);\r\n      this.p5.image(\r\n        this.pushCircle,\r\n        this.sprite.position.x - this.sprite.width / 2,\r\n        this.sprite.position.y - this.sprite.height / 2,\r\n        this.sprite.width,\r\n        this.sprite.height\r\n      );\r\n    }\r\n\r\n    /* アイコンフォントを描画 */\r\n    drawIconfont(color = \"#FF8C00\") {\r\n      this.p5.textFont('Material Icons');\r\n      if (!this.sprite.visible) return;\r\n      this.p5.fill(color);\r\n      this.p5.noStroke();\r\n      this.p5.textSize(this.sprite.width);\r\n      this.p5.textAlign(this.p5.CENTER);\r\n\r\n      this.p5.text(\r\n        this.image,\r\n        this.sprite.position.x,\r\n        this.sprite.position.y + this.sprite.height / 2\r\n      );\r\n    }\r\n\r\n    /**\r\n     * 表示された時間と今の時間との差を取得\r\n     * @returns {number} 二つの円が重なる時間と今の時間との差\r\n     */\r\n    calcDiff() {\r\n      return this.p5.millis() - this.showTime;\r\n    }\r\n\r\n  }\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/pushable.js\n// module id = 23\n// module chunks = 2"],"sourceRoot":""}